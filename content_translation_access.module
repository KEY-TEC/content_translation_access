<?php

/**
 * @file
 * Adds access hooks.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Language\Language;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\content_translation\ContentTranslationManager;
use Drupal\Core\Form\FormStateInterface;
use Drupal\content_translation\BundleTranslationSettingsInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_entity_access() for entity edit/delete access.
 */
function content_translation_access_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  /** @var \Drupal\content_translation_access\AccessControlHandlerInterface $access_control_handler */
  $access_control_handler = \Drupal::service('content_translation_access.access_control_handler');
  return $access_control_handler->access($entity, $operation, $account);

}

/**
 * Implements hook_entity_create_access() for entity create access.
 */
function content_translation_access_entity_create_access(AccountInterface $account, array $context, $entity_bundle) {
  /** @var \Drupal\content_translation_access\AccessControlHandlerInterface $access_control_handler */
  $access_control_handler = \Drupal::service('content_translation_access.access_control_handler');
  if (isset($context['entity_type_id']) && isset($context['langcode'])) {
    if ($context['langcode'] == 'x-default') {
      return $access_control_handler->createAnyAccess($context['entity_type_id'], $entity_bundle, $account);
    }
    else {
      $language = \Drupal::languageManager()->getLanguage($context['langcode']);
      if ($language != NULL) {
        return $access_control_handler->createAccess($context['entity_type_id'], $entity_bundle, $language, $account);
      }
    }
  }
}

/**
 * Implements hook_entity_translation_create_access() for create translation.
 */
function content_translation_access_entity_translation_create_access(EntityInterface $entity, AccountInterface $account, array $context) {
  /** @var \Drupal\content_translation_access\AccessControlHandlerInterface $access_control_handler */
  $access_control_handler = \Drupal::service('content_translation_access.access_control_handler');
  $language = \Drupal::languageManager()->getLanguage($context['langcode']);
  return $access_control_handler->createAccess($context['entity_type_id'], $entity->bundle(), $language, $account, $entity);
}

/**
 * Implements hook_entity_translation_create_access() for create translation.
 */
function content_translation_access_entity_translation_access(EntityInterface $entity, $operation, AccountInterface $account) {
  /** @var \Drupal\content_translation_access\AccessControlHandlerInterface $access_control_handler */
  $access_control_handler = \Drupal::service('content_translation_access.access_control_handler');
  return $access_control_handler->access($entity, $operation, $account);
}

/**
 * Implements hook_entity_type_alter() for adding a entity validation constraint.
 */
function content_translation_access_entity_type_alter(array &$entity_types) {
  // Provide defaults for translation info.
  /* @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  foreach ($entity_types as $entity_type) {
    // @TODO: Find a better way to remove fields.
    if ($entity_type->isTranslatable() && $entity_type->id() == 'node') {
      $entity_type->setHandlerClass('translation', 'Drupal\content_translation_access\ContentTranslationAccessHandler');
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function content_translation_access_form_language_content_settings_form_alter(array &$form, FormStateInterface $form_state) {
  /* Inject into the content language settings the translation settings if the
  user has the required permission. */
  if (!\Drupal::currentUser()->hasPermission('administer content translation')) {
    return;
  }

  /** @var \Drupal\content_translation\ContentTranslationManagerInterface $content_translation_manager */
  $content_translation_manager = \Drupal::service('content_translation.manager');
  $default = $form['entity_types']['#default_value'];
  foreach ($default as $entity_type_id => $enabled) {
    $default[$entity_type_id] = $enabled || $content_translation_manager->isEnabled($entity_type_id) ? $entity_type_id : FALSE;
  }
  $form['entity_types']['#default_value'] = $default;

  $form['#attached']['library'][] = 'content_translation/drupal.content_translation.admin';

  $entity_manager = Drupal::entityTypeManager();
  $bundle_info_service = \Drupal::service('entity_type.bundle.info');
  foreach ($form['#labels'] as $entity_type_id => $label) {
    $entity_type = $entity_manager->getDefinition($entity_type_id);

    $entity_type_translatable = $content_translation_manager->isSupported($entity_type_id);
    foreach ($bundle_info_service->getBundleInfo($entity_type_id) as $bundle => $bundle_info) {
      // Here we do not want the widget to be altered and hold also the "Enable
      // translation" checkbox, which would be redundant. Hence we add this key
      // to be able to skip alterations. Alter the title and display the message
      // about UI integration.
      $form['settings'][$entity_type_id][$bundle]['settings']['language']['#content_translation_skip_alter'] = TRUE;
      if (!$entity_type_translatable) {
        $form['settings'][$entity_type_id]['#title'] = t('@label (Translation is not supported).', ['@label' => $entity_type->getLabel()]);
        continue;
      }

      // Displayed the "shared fields widgets" toggle.
      if ($content_translation_manager instanceof BundleTranslationSettingsInterface) {
        $settings = $content_translation_manager->getBundleTranslationSettings($entity_type_id, $bundle);
        $force_hidden = ContentTranslationManager::isPendingRevisionSupportEnabled($entity_type_id, $bundle);
        $form['settings'][$entity_type_id][$bundle]['settings']['content_translation']['untranslatable_fields_hide_with_permission'] = [
          '#type' => 'checkbox',
          '#title' => t('Hide non translatable fields on translation forms (with permission)'),
          '#default_value' => $force_hidden || !empty($settings['untranslatable_fields_hide_with_permission']),
          '#disabled' => $force_hidden,
          '#description' => $force_hidden ? t('Hide non translatable fields in translation forms when missing permission.') : '',
          '#states' => [
            'visible' => [
              ':input[name="settings[' . $entity_type_id . '][' . $bundle . '][translatable]"]' => [
                'checked' => TRUE,
              ],
            ],
          ],
        ];
      }
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function content_translation_access_module_implements_alter(&$implementations, $hook) {

  // Change the order to ovveride the node_node_access result.
  if ($hook == 'node_access') {
    $group = $implementations['content_translation_access'];
    unset($implementations['content_translation_access']);
    $implementations['content_translation_access'] = $group;
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function content_translation_access_node_access(NodeInterface $node, $operation, AccountInterface $account) {

  $access = AccessResult::neutral();
  $language = \Drupal::languageManager()->getCurrentLanguage(LanguageInterface::TYPE_CONTENT);
  if ($language instanceof Language) {
    // Override node access in the case that the user already have language access.
    /** @var \Drupal\content_translation_access\AccessControlHandlerInterface $access_control_handler */
    $access_control_handler = \Drupal::service('content_translation_access.access_control_handler');
    $access = $access_control_handler->access($node, $operation, $account, $language);
  }

  return $access;
}
